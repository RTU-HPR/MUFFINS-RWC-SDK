on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: lib

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"

      - name: Fetch latest changes
        run: git fetch origin

      - name: Remove all files
        run: |
          rm -rf *

      - name: Checkout .libfiles from main branch
        run: git checkout origin/main .libfiles

      - name: Checkout files listed in .libfiles
        run: |
          while IFS= read -r line || [[ -n "$line" ]]
          do
            if ! git checkout origin/main "$line"; then
              echo "File $line does not exist in the repository, skipping..."
              continue
            fi
            echo "Checked out: $line"
          done < ".libfiles"

      - name: Ensure src directory exists
        run: |
          if [ ! -d "src" ]; then
            echo "Directory src does not exist. Creating it..."
            mkdir -p "src"
            if [ $? -eq 0 ]; then
              echo "Directory src created successfully."
            else
              echo "Failed to create directory src."
              exit 1
            fi
          else
            echo "Directory src already exists."
          fi

      - name: Move files to src directory
        run: |
          while IFS= read -r line || [[ -n "$line" ]]
          do
            if ! mv "$line" src/; then
              echo "File $line does not exist in the repository or is already in the dir, skipping..."
              continue
            fi
            echo "Moved: $line"
          done < ".libfiles"

      - name: Remove .libfiles
        run: rm .libfiles

      - name: Get commit hash
        id: commit_hash
        run: echo "::set-output name=hash::$(git rev-parse --short origin/main)"

      - name: Commit and push changes
        run: |
          hash=$(echo "${{ steps.commit_hash.outputs.hash }}")
          commit_msg="$(date +'%Y-%m-%d %H:%M'), main: $hash"
          echo "Autogenerated by GitHub Actions" > .libinfo
          echo "$commit_msg" >> .libinfo
          git add .libinfo
          git add .
          git commit -m "$commit_msg"
          git push